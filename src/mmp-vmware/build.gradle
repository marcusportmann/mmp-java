group 'guru.mmp'

version '2.0.0'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven-publish'

repositories {
  mavenCentral()
}

dependencies {
  compile files('../../dist/mmp-common-2.0.0.jar')
  
  compile 'org.slf4j:slf4j-jdk14:1.7.21'
  
  testCompile 'junit:junit:4.12'
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
    }
  }
}

task copyToDist (type: Copy, dependsOn: build) {
  from './build/libs'
  into '../../dist'
  include "${project.name}-${version}.jar"
}   

build.finalizedBy(copyToDist)
  
task cleanDist (type: Delete, dependsOn: clean) {
  delete "../../dist/${project.name}-${version}.jar"
}   

clean.finalizedBy(cleanDist)

// ---------------------------------------------------------------------------------------
// Add the wsdl2java task
// ---------------------------------------------------------------------------------------
task wsdl2java(type: WSDL2JavaTask) {
  sourceDir = "${projectDir}/src/main/java"
  bindingFiles.add("${projectDir}/src/main/resources/META-INF/wsdl/mmp-bindings.xjb")
  wsdlFiles.add("${projectDir}/src/main/resources/META-INF/wsdl/STSService.wsdl")
  wsdlFiles.add("${projectDir}/src/main/resources/META-INF/wsdl/vimService.wsdl")
}

// ---------------------------------------------------------------------------------------
// The WSDL2JavaTask generates the JAX-WS portable artifacts from WSDL files.
// ---------------------------------------------------------------------------------------
class WSDL2JavaTask extends DefaultTask {

  List<String> bindingFiles = new ArrayList<String>()
  
  boolean keepGeneratedFiles = true

  String sourceDir
  
  String targetVersion  = "2.2"

  List<String> wsdlFiles = new ArrayList<String>()

  @TaskAction
  def wsdl2java() {
    println "- Generating the JAX-WS portable artifacts for the project \"${project.name}\" using ${wsdlFiles.size} WSDL file(s)..."

    if ((sourceDir == null) || (sourceDir.length() == 0)) {
      throw new GradleException('No source directory specified for the WSDL2JavaTask task')
    }

    List<String> parameters = new ArrayList<String>()
    
    parameters.add('wsimport')

    for (String bindingFile : bindingFiles) {
      parameters.add('-b')
      parameters.add("${bindingFile}")
    }
    
    parameters.add('-cp')
    parameters.add('../mmp-common/build/classes/main/')
    
    if (keepGeneratedFiles) {
      parameters.add('-keep')
    }

    parameters.add('-s')
    parameters.add("${sourceDir}")
    
    parameters.add('-target')
    parameters.add("${targetVersion}")
    
    parameters.add('-Xnocompile')
    
    for (String wsdlFile : wsdlFiles) {

      println "  - Processing the WSDL file \"${wsdlFile}\""
  
      List<String> wsdlParameters = new ArrayList<String>(parameters)
      
      wsdlParameters.add(wsdlFile)
      
      String[] execParameters = wsdlParameters.toArray()
      
      execParameters[execParameters.length - 1] = wsdlFile
      
      Process process = Runtime.getRuntime().exec(execParameters)    

      java.io.BufferedReader input = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()))
    
      String line
    
      while ((line = input.readLine()) != null) {
        println line
      }
      
      input.close();    
    }    
  }
} 
