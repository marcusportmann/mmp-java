-- -----------------------------------------------------------------------------------------
-- 
--      _                _ _           _   _             ____  ____ ____              _ 
--     / \   _ __  _ __ | (_) ___ __ _| |_(_) ___  _ __ |  _ \| __ )___ \   ___  __ _| |
--    / _ \ | '_ \| '_ \| | |/ __/ _` | __| |/ _ \| '_ \| | | |  _ \ __) | / __|/ _` | |
--   / ___ \| |_) | |_) | | | (_| (_| | |_| | (_) | | | | |_| | |_) / __/ _\__ \ (_| | |
--  /_/   \_\ .__/| .__/|_|_|\___\__,_|\__|_|\___/|_| |_|____/|____/_____(_)___/\__, |_|
--          |_|   |_|                                                              |_|  
-- 
-- -----------------------------------------------------------------------------------------

-- -------------------------------------------------------------------------------------------------
-- DROP EXISTING TABLES
-- -------------------------------------------------------------------------------------------------
ALTER TABLE CODES DROP CONSTRAINT FK_CODES_CODE_CATEGORY;
ALTER TABLE CACHED_CODE_CATEGORIES DROP CONSTRAINT FK_CACHED_CODE_CATEGORIES_CODE_CATEGORY;
ALTER TABLE CACHED_CODES DROP CONSTRAINT FK_CACHED_CODES_CACHED_CODE_CATEGORY;

DROP TABLE CODES;
DROP TABLE CODE_CATEGORIES;
DROP TABLE CACHED_CODES;
DROP TABLE CACHED_CODE_CATEGORIES;

DROP TABLE SCHEDULED_TASK_PARAMETERS;
DROP TABLE SCHEDULED_TASKS;

DROP TABLE USER_ORGANISATION_MAP;
DROP TABLE USER_GROUP_MAP;
DROP TABLE FUNCTION_USER_MAP;
DROP TABLE EXTERNAL_FUNCTION_USER_MAP;
DROP TABLE FUNCTION_GROUP_MAP;
DROP TABLE EXTERNAL_FUNCTION_GROUP_MAP;
DROP TABLE FUNCTION_TEMPLATE_MAP;
DROP TABLE FUNCTIONS;
DROP TABLE FUNCTION_TEMPLATES;
DROP TABLE PASSWORD_HISTORY;
DROP TABLE USERS;
DROP TABLE EXTERNAL_USERS;
DROP TABLE GROUPS;
DROP TABLE EXTERNAL_GROUPS;
DROP TABLE ORGANISATIONS;
DROP TABLE IDGENERATOR;

DROP TABLE SERVICE_REGISTRY;
DROP TABLE REGISTRY;



-- -------------------------------------------------------------------------------------------------
-- DB2 SPECIFIC COMMANDS
-- -------------------------------------------------------------------------------------------------



-- -------------------------------------------------------------------------------------------------
-- CREATE TABLES
-- -------------------------------------------------------------------------------------------------
CREATE TABLE REGISTRY (
  ID          CHAR(40) NOT NULL,
  PARENT_ID   CHAR(40),
  ENTRY_TYPE  INTEGER NOT NULL,
  NAME        VARCHAR(250) NOT NULL,
  SVALUE      VARCHAR(1024),
  IVALUE      INTEGER,
  DVALUE      DECIMAL(16,12),
  BVALUE      BLOB(1024k),
  
  CONSTRAINT REGISTRY_ID_UNQ UNIQUE (ID),
  PRIMARY KEY (ID)
);

CREATE INDEX REGISTRY_NAME_IX
  ON REGISTRY
  (NAME);

CREATE INDEX REGISTRY_PARENT_ID_IX
  ON REGISTRY
  (PARENT_ID);

COMMENT ON COLUMN REGISTRY.ID
  IS 'The unique ID for the registry entry';

COMMENT ON COLUMN REGISTRY.PARENT_ID
  IS 'The ID of the parent entry for the registry entry';

COMMENT ON COLUMN REGISTRY.ENTRY_TYPE
  IS 'The type of registry entry';

COMMENT ON COLUMN REGISTRY.NAME
  IS 'The name of the registry entry';

COMMENT ON COLUMN REGISTRY.SVALUE
  IS 'The string value for the registry entry';

COMMENT ON COLUMN REGISTRY.IVALUE
  IS 'The integer value for the registry entry';

COMMENT ON COLUMN REGISTRY.DVALUE
  IS 'The decimal value for the registry entry';

COMMENT ON COLUMN REGISTRY.BVALUE
  IS 'The binary value for the registry entry';

  
  
CREATE TABLE SERVICE_REGISTRY (
  NAME                  VARCHAR(255) NOT NULL,
  SECURITY_TYPE         INTEGER NOT NULL,
  REQUIRES_USER_TOKEN   CHAR(1) NOT NULL, 
	SUPPORTS_COMPRESSION  CHAR(1) NOT NULL,
	ENDPOINT              VARCHAR(512) NOT NULL,
  SERVICE_CLASS         VARCHAR(512) NOT NULL,
  WSDL_LOCATION         VARCHAR(512) NOT NULL,
  USERNAME              VARCHAR(100),
  PASSWORD              VARCHAR(100),

	PRIMARY KEY (NAME)
);  
  
COMMENT ON COLUMN SERVICE_REGISTRY.NAME
  IS 'The name used to uniquely identify the web service';

COMMENT ON COLUMN SERVICE_REGISTRY.SECURITY_TYPE
  IS 'The type of security model implemented by the web service i.e. 0 = None, 1 = WS-Security X509 Certificates, 2 = WS-Security Username Token, 3 = Client SSL, 4 = HTTP Authentication';

COMMENT ON COLUMN SERVICE_REGISTRY.REQUIRES_USER_TOKEN
  IS 'Does the web service require a user security token';

COMMENT ON COLUMN SERVICE_REGISTRY.SUPPORTS_COMPRESSION
  IS 'Does the web service support compression';
  
COMMENT ON COLUMN SERVICE_REGISTRY.ENDPOINT
  IS 'The endpoint for the web service';

COMMENT ON COLUMN SERVICE_REGISTRY.SERVICE_CLASS
  IS 'The fully qualified name of the Java service class';
  
COMMENT ON COLUMN SERVICE_REGISTRY.WSDL_LOCATION
  IS 'The location of the WSDL defining the web service on the classpath';

COMMENT ON COLUMN SERVICE_REGISTRY.USERNAME
  IS 'The username to use when accessing a web service with username-password security enabled';

COMMENT ON COLUMN SERVICE_REGISTRY.PASSWORD
  IS 'The password to use when accessing a web service with username-password security enabled';
  
  
  
CREATE TABLE ORGANISATIONS (
  ID           INTEGER NOT NULL,
  CODE         VARCHAR(40) NOT NULL,
  NAME         VARCHAR(256) NOT NULL,
  DESCRIPTION  VARCHAR(512),
  
  PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX ORGANISATIONS_CODE_IX
  ON ORGANISATIONS
  (CODE);

COMMENT ON COLUMN ORGANISATIONS.ID
  IS 'The unique ID for the organisation used to associate the organisation with other database entities';

COMMENT ON COLUMN ORGANISATIONS.CODE
  IS 'The code uniquely identifying the organisation';
  
COMMENT ON COLUMN ORGANISATIONS.NAME
  IS 'The name of the organisation';

COMMENT ON COLUMN ORGANISATIONS.DESCRIPTION
  IS 'A description for the organisation';

  
  
CREATE TABLE USERS (
  ID                 INTEGER NOT NULL,
  USERNAME           VARCHAR(100) NOT NULL,
  PASSWORD           VARCHAR(100),
  TITLE              VARCHAR(100),
  FIRST_NAMES        VARCHAR(100),
  LAST_NAME          VARCHAR(100),
  PHONE              VARCHAR(30),
  FAX                VARCHAR(30),
  MOBILE             VARCHAR(30),
  EMAIL              VARCHAR(200),
  PASSWORD_ATTEMPTS  INTEGER,
  PASSWORD_EXPIRY    TIMESTAMP,
  DESCRIPTION        VARCHAR(250),
  
  PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX USERS_USERNAME_IX
  ON USERS
  (USERNAME);

COMMENT ON COLUMN USERS.ID
  IS 'The unique ID for the user used to associate the user with other database entities';

COMMENT ON COLUMN USERS.USERNAME
  IS 'The username for the user';
  
COMMENT ON COLUMN USERS.PASSWORD
  IS 'The password for the user';

COMMENT ON COLUMN USERS.TITLE
  IS 'The title for the user e.g. Mr, Mrs, etc';

COMMENT ON COLUMN USERS.FIRST_NAMES
  IS 'The first name(s) / forname(s) for the user';

COMMENT ON COLUMN USERS.LAST_NAME
  IS 'The last name / surname for the user';

COMMENT ON COLUMN USERS.PHONE
  IS 'The telephone number for the user';

COMMENT ON COLUMN USERS.FAX
  IS 'The fax number for the user';

COMMENT ON COLUMN USERS.MOBILE
  IS 'The mobile number for the user';

COMMENT ON COLUMN USERS.EMAIL
  IS 'The e-mail address for the user';

COMMENT ON COLUMN USERS.PASSWORD_ATTEMPTS
  IS 'The number of failed attempts to authenticate the user';

COMMENT ON COLUMN USERS.PASSWORD_EXPIRY
  IS 'The date and time that the user''s password expires';

COMMENT ON COLUMN USERS.DESCRIPTION
  IS 'A description for the user';
  
  

CREATE TABLE EXTERNAL_USERS (
  ID        INTEGER NOT NULL,
  USERNAME  VARCHAR(100) NOT NULL,
  
  PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX EXTERNAL_USERS_USERNAME_IX
  ON EXTERNAL_USERS
  (USERNAME);

COMMENT ON COLUMN EXTERNAL_USERS.ID
  IS 'The unique ID for the external user used to associate the user with other database entities';

COMMENT ON COLUMN EXTERNAL_USERS.USERNAME
  IS 'The username for the external user';

  
  
CREATE TABLE PASSWORD_HISTORY (
  ID        INTEGER NOT NULL,
  USER_ID   INTEGER NOT NULL,
  CHANGED   TIMESTAMP NOT NULL,  
  PASSWORD  VARCHAR(100),
  
  PRIMARY KEY (ID),
  CONSTRAINT PASSWORD_HISTORY_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE INDEX PASSWORD_HISTORY_USER_ID_IX
  ON PASSWORD_HISTORY
  (USER_ID);

CREATE INDEX PASSWORD_HISTORY_CHANGED_IX
  ON PASSWORD_HISTORY
  (CHANGED);
  
COMMENT ON COLUMN PASSWORD_HISTORY.ID
  IS 'The unique ID for the password history entry';

COMMENT ON COLUMN PASSWORD_HISTORY.USER_ID
  IS 'The unique ID for the user';
  
COMMENT ON COLUMN PASSWORD_HISTORY.CHANGED
  IS 'When the password change took place';

COMMENT ON COLUMN PASSWORD_HISTORY.PASSWORD
  IS 'The password for the user';

  

CREATE TABLE GROUPS (
  ID           INTEGER NOT NULL,
  GROUPNAME    VARCHAR(100) NOT NULL,
  DESCRIPTION  VARCHAR(250),
  
  PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX GROUPS_GROUPNAME_IX
  ON GROUPS
  (GROUPNAME);

COMMENT ON COLUMN GROUPS.ID
  IS 'The unique ID for the group used to associate the group with other database entities';

COMMENT ON COLUMN GROUPS.GROUPNAME
  IS 'The unique group name used to identify the group';
  
COMMENT ON COLUMN GROUPS.DESCRIPTION
  IS 'A description for the group';

  
  
CREATE TABLE EXTERNAL_GROUPS (
  ID         INTEGER NOT NULL,
  GROUPNAME  VARCHAR(255) NOT NULL,
  
  PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX EXTERNAL_GROUPS_GROUPNAME_IX
  ON EXTERNAL_GROUPS
  (GROUPNAME);

COMMENT ON COLUMN EXTERNAL_GROUPS.ID
  IS 'The unique ID for the external group used to associate the group with other database entities';

COMMENT ON COLUMN EXTERNAL_GROUPS.GROUPNAME
  IS 'The unique group name used to identify the external group';

  

CREATE TABLE USER_GROUP_MAP (
  GROUP_ID         INTEGER NOT NULL,
  USER_ID          INTEGER NOT NULL,
  ORGANISATION_ID  INTEGER NOT NULL,  
  
  PRIMARY KEY (GROUP_ID, USER_ID, ORGANISATION_ID),
  CONSTRAINT USER_GROUP_MAP_GROUP_FK FOREIGN KEY (GROUP_ID) REFERENCES GROUPS(ID) ON DELETE CASCADE,
  CONSTRAINT USER_GROUP_MAP_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
  CONSTRAINT USER_GROUP_MAP_ORGANISATION_FK FOREIGN KEY (ORGANISATION_ID) REFERENCES ORGANISATIONS(ID) ON DELETE CASCADE
);

CREATE INDEX USER_GROUP_MAP_GROUP_ID_IX
  ON USER_GROUP_MAP
  (GROUP_ID);

CREATE INDEX USER_GROUP_MAP_USER_ID_IX
  ON USER_GROUP_MAP
  (USER_ID);

CREATE INDEX USER_GROUP_MAP_ORGANISATION_ID_IX
  ON USER_GROUP_MAP
  (ORGANISATION_ID);
  
COMMENT ON COLUMN USER_GROUP_MAP.GROUP_ID
  IS 'The unique ID for the group';

COMMENT ON COLUMN USER_GROUP_MAP.USER_ID
  IS 'The unique ID for the user';

COMMENT ON COLUMN USER_GROUP_MAP.ORGANISATION_ID
  IS 'The unique ID for the organisation';
  

  
CREATE TABLE USER_ORGANISATION_MAP (
  USER_ID          INTEGER NOT NULL,
  ORGANISATION_ID  INTEGER NOT NULL,  
  
  PRIMARY KEY (USER_ID, ORGANISATION_ID),
  CONSTRAINT USER_ORGANISATION_MAP_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
  CONSTRAINT USER_ORGANISATION_MAP_ORGANISATION_FK FOREIGN KEY (ORGANISATION_ID) REFERENCES ORGANISATIONS(ID) ON DELETE CASCADE
);

CREATE INDEX USER_ORGANISATION_MAP_USER_ID_IX
  ON USER_ORGANISATION_MAP
  (USER_ID);

CREATE INDEX USER_ORGANISATION_MAP_ORGANISATION_ID_IX
  ON USER_GROUP_MAP
  (USER_ID);

COMMENT ON COLUMN USER_ORGANISATION_MAP.USER_ID
  IS 'The unique ID for the user';

COMMENT ON COLUMN USER_ORGANISATION_MAP.ORGANISATION_ID
  IS 'The unique ID for the organisation';
  
  
  
CREATE TABLE FUNCTIONS (
  ID           INTEGER NOT NULL,
  CODE         VARCHAR(100) NOT NULL,
  NAME         VARCHAR(100) NOT NULL,
  DESCRIPTION  VARCHAR(250),
  
  PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX FUNCTIONS_CODE_IX
  ON FUNCTIONS
  (CODE);

COMMENT ON COLUMN FUNCTIONS.ID
  IS 'The unique ID for the function used to associate the function with other database entities';
  
COMMENT ON COLUMN FUNCTIONS.CODE
  IS 'The unique code used to identify the function';

COMMENT ON COLUMN FUNCTIONS.NAME
  IS 'The name of the function';

COMMENT ON COLUMN FUNCTIONS.DESCRIPTION
  IS 'A description for the function';



CREATE TABLE FUNCTION_TEMPLATES (
  ID           INTEGER NOT NULL,
  CODE         VARCHAR(100) NOT NULL,
  NAME         VARCHAR(100) NOT NULL,
  DESCRIPTION  VARCHAR(250),
  
  PRIMARY KEY (ID)
);

CREATE UNIQUE INDEX FUNCTION_TEMPLATES_CODE_IX
  ON FUNCTION_TEMPLATES
  (CODE);

COMMENT ON COLUMN FUNCTION_TEMPLATES.ID
  IS 'The unique ID for the function template used to associate the function with other database entities';
  
COMMENT ON COLUMN FUNCTION_TEMPLATES.CODE
  IS 'The unique code used to identify the function template';

COMMENT ON COLUMN FUNCTION_TEMPLATES.NAME
  IS 'The name of the function template';

COMMENT ON COLUMN FUNCTION_TEMPLATES.DESCRIPTION
  IS 'A description for the function template';



CREATE TABLE FUNCTION_USER_MAP (
  USER_ID          INTEGER NOT NULL,
  FUNCTION_ID      INTEGER NOT NULL,
  ORGANISATION_ID  INTEGER NOT NULL,  
  
  PRIMARY KEY (USER_ID, FUNCTION_ID, ORGANISATION_ID),
  CONSTRAINT FUNCTION_USER_MAP_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
  CONSTRAINT FUNCTION_USER_MAP_FUNCTION_FK FOREIGN KEY (FUNCTION_ID) REFERENCES FUNCTIONS(ID) ON DELETE CASCADE,
  CONSTRAINT FUNCTION_USER_MAP_ORGANISATION_FK FOREIGN KEY (ORGANISATION_ID) REFERENCES ORGANISATIONS(ID) ON DELETE CASCADE
);

CREATE INDEX FUNCTION_USER_MAP_USER_ID_IX
  ON FUNCTION_USER_MAP
  (USER_ID);

CREATE INDEX FUNCTION_USER_MAP_ORGANISATION_ID_IX
  ON FUNCTION_USER_MAP
  (ORGANISATION_ID);
  
COMMENT ON COLUMN FUNCTION_USER_MAP.USER_ID
  IS 'The unique ID for the user';

COMMENT ON COLUMN FUNCTION_USER_MAP.FUNCTION_ID
  IS 'The unique ID for the function';  

COMMENT ON COLUMN FUNCTION_USER_MAP.ORGANISATION_ID
  IS 'The unique ID for the organisation';  

  

CREATE TABLE EXTERNAL_FUNCTION_USER_MAP (
  USER_ID          INTEGER NOT NULL,
  FUNCTION_ID      INTEGER NOT NULL,
  ORGANISATION_ID  INTEGER NOT NULL,  
  
  PRIMARY KEY (USER_ID, FUNCTION_ID, ORGANISATION_ID),
  CONSTRAINT EXTERNAL_FUNCTION_USER_MAP_USER_FK FOREIGN KEY (USER_ID) REFERENCES EXTERNAL_USERS(ID) ON DELETE CASCADE,
  CONSTRAINT EXTERNAL_FUNCTION_USER_MAP_FUNCTION_FK FOREIGN KEY (FUNCTION_ID) REFERENCES FUNCTIONS(ID) ON DELETE CASCADE,
  CONSTRAINT EXTERNAL_FUNCTION_USER_MAP_ORGANISATION_FK FOREIGN KEY (ORGANISATION_ID) REFERENCES ORGANISATIONS(ID) ON DELETE CASCADE
);

CREATE INDEX EXTERNAL_FUNCTION_USER_MAP_USER_ID_IX
  ON EXTERNAL_FUNCTION_USER_MAP
  (USER_ID);

CREATE INDEX EXTERNAL_FUNCTION_USER_MAP_ORGANISATION_ID_IX
  ON EXTERNAL_FUNCTION_USER_MAP
  (ORGANISATION_ID);
  
COMMENT ON COLUMN EXTERNAL_FUNCTION_USER_MAP.USER_ID
  IS 'The unique ID for the external user';

COMMENT ON COLUMN EXTERNAL_FUNCTION_USER_MAP.FUNCTION_ID
  IS 'The unique ID for the function';  

COMMENT ON COLUMN EXTERNAL_FUNCTION_USER_MAP.ORGANISATION_ID
  IS 'The unique ID for the organisation';  
  
  

CREATE TABLE FUNCTION_GROUP_MAP (
  GROUP_ID     INTEGER NOT NULL,
  FUNCTION_ID INTEGER NOT NULL,
  
  PRIMARY KEY (GROUP_ID, FUNCTION_ID),
  CONSTRAINT FUNCTION_GROUP_MAP_GROUP_FK FOREIGN KEY (GROUP_ID) REFERENCES GROUPS(ID) ON DELETE CASCADE,
  CONSTRAINT FUNCTION_GROUP_MAP_FUNCTION_FK FOREIGN KEY (FUNCTION_ID) REFERENCES FUNCTIONS(ID) ON DELETE CASCADE
);

CREATE INDEX FUNCTION_GROUP_MAP_ID_IX
  ON FUNCTION_GROUP_MAP
  (GROUP_ID);

COMMENT ON COLUMN FUNCTION_GROUP_MAP.GROUP_ID
  IS 'The unique ID for the group';

COMMENT ON COLUMN FUNCTION_GROUP_MAP.FUNCTION_ID
  IS 'The unique ID for the function';  

  

CREATE TABLE EXTERNAL_FUNCTION_GROUP_MAP (
  GROUP_ID     INTEGER NOT NULL,
  FUNCTION_ID  INTEGER NOT NULL,
  
  PRIMARY KEY (GROUP_ID, FUNCTION_ID),
  CONSTRAINT EXTERNAL_FUNCTION_GROUP_MAP_GROUP_FK FOREIGN KEY (GROUP_ID) REFERENCES EXTERNAL_GROUPS(ID) ON DELETE CASCADE,
  CONSTRAINT EXTERNAL_FUNCTION_GROUP_MAP_FUNCTION_FK FOREIGN KEY (FUNCTION_ID) REFERENCES FUNCTIONS(ID) ON DELETE CASCADE
);

CREATE INDEX EXTERNAL_FUNCTION_GROUP_MAP_ID_IX
  ON EXTERNAL_FUNCTION_GROUP_MAP
  (GROUP_ID);

COMMENT ON COLUMN EXTERNAL_FUNCTION_GROUP_MAP.GROUP_ID
  IS 'The unique ID for the external group';

COMMENT ON COLUMN EXTERNAL_FUNCTION_GROUP_MAP.FUNCTION_ID
  IS 'The unique ID for the function';  

  
  
CREATE TABLE FUNCTION_TEMPLATE_MAP (
  FUNCTION_ID  INTEGER NOT NULL,
  TEMPLATE_ID  INTEGER NOT NULL,
  
  PRIMARY KEY (FUNCTION_ID, TEMPLATE_ID),
  CONSTRAINT FUNCTION_TEMPLATE_MAP_FUNC_FK FOREIGN KEY (FUNCTION_ID) REFERENCES FUNCTIONS(ID) ON DELETE CASCADE,
  CONSTRAINT FUNCTION_TEMPLATE_MAP_TMPL_FK FOREIGN KEY (TEMPLATE_ID) REFERENCES FUNCTION_TEMPLATES(ID) ON DELETE CASCADE
);

COMMENT ON COLUMN FUNCTION_TEMPLATE_MAP.FUNCTION_ID
  IS 'The unique ID for the function';

COMMENT ON COLUMN FUNCTION_TEMPLATE_MAP.TEMPLATE_ID
  IS 'The unique ID for the template';



CREATE TABLE IDGENERATOR (
  NAME     VARCHAR(100) NOT NULL,
  CURRENT  BIGINT DEFAULT 0,
  
  PRIMARY KEY (NAME)
);

COMMENT ON COLUMN IDGENERATOR.NAME
  IS 'The name giving the type of entity associated with the generated ID';

COMMENT ON COLUMN IDGENERATOR.CURRENT
  IS 'The current ID for the type';

  

CREATE TABLE SCHEDULED_TASKS (
  ID                  VARCHAR(40) NOT NULL,
  NAME                VARCHAR(512) NOT NULL,
  SCHEDULING_PATTERN  VARCHAR(200) NOT NULL,
  TASK_CLASS          VARCHAR(512) NOT NULL,
  STATUS              INTEGER NOT NULL DEFAULT 1,
  EXECUTION_ATTEMPTS  INTEGER NOT NULL DEFAULT 0,
  LOCK_NAME           VARCHAR(100),
  LAST_EXECUTED       TIMESTAMP,
  NEXT_EXECUTION      TIMESTAMP,
  UPDATED             TIMESTAMP,
  
  PRIMARY KEY (ID)
);
  
COMMENT ON COLUMN SCHEDULED_TASKS.ID
  IS 'The Universally Unique Identifier (UUID) used to uniquely identify the scheduled task';

COMMENT ON COLUMN SCHEDULED_TASKS.NAME
  IS 'The name of the scheduled task';

COMMENT ON COLUMN SCHEDULED_TASKS.SCHEDULING_PATTERN
  IS 'The cron-style scheduling pattern for the scheduled task';
  
COMMENT ON COLUMN SCHEDULED_TASKS.TASK_CLASS
  IS 'The fully qualified name of the Java class that implements the scheduled task';

COMMENT ON COLUMN SCHEDULED_TASKS.STATUS
  IS 'The status of the scheduled task';

COMMENT ON COLUMN SCHEDULED_TASKS.EXECUTION_ATTEMPTS
  IS 'The number of times the current execution of the scheduled task has been attempted';

COMMENT ON COLUMN SCHEDULED_TASKS.LOCK_NAME
  IS 'The name of the entity that has locked the scheduled task for execution';
  
COMMENT ON COLUMN SCHEDULED_TASKS.LAST_EXECUTED
  IS 'The date and time the scheduled task was last executed';  

COMMENT ON COLUMN SCHEDULED_TASKS.NEXT_EXECUTION
  IS 'The date and time when the scheduled task will next be executed';  
  
COMMENT ON COLUMN SCHEDULED_TASKS.UPDATED
  IS 'The date and time the scheduled task was updated';  
  

  
CREATE TABLE SCHEDULED_TASK_PARAMETERS (
  ID                 BIGINT NOT NULL,
  SCHEDULED_TASK_ID  VARCHAR(40) NOT NULL,
  NAME               VARCHAR(250) NOT NULL,
  VALUE              VARCHAR(1024) NOT NULL,
  
  PRIMARY KEY (ID)
);
  
COMMENT ON COLUMN SCHEDULED_TASK_PARAMETERS.ID
  IS 'The ID uniquely identifying the scheduled task parameter';  
  
COMMENT ON COLUMN SCHEDULED_TASK_PARAMETERS.SCHEDULED_TASK_ID
  IS 'The Universally Unique Identifier (UUID) used to uniquely identify the scheduled task the scheduled task parameter is associated with';  

COMMENT ON COLUMN SCHEDULED_TASK_PARAMETERS.NAME
  IS 'The name of the scheduled task parameter';  

COMMENT ON COLUMN SCHEDULED_TASK_PARAMETERS.VALUE
  IS 'The value of the scheduled task parameter';   
  

  
CREATE TABLE CODE_CATEGORIES (
  ID                  VARCHAR(40) NOT NULL,
  ORGANISATION        VARCHAR(40) NOT NULL,
  CATEGORY_TYPE       INTEGER NOT NULL,
  NAME                VARCHAR(256) NOT NULL,
  DESCRIPTION         VARCHAR(512) NOT NULL,
  CODE_DATA           BLOB(4096k),
  ENDPOINT            VARCHAR(512),
  IS_ENDPOINT_SECURE  NUMERIC(1,0) NOT NULL DEFAULT 0,
  IS_CACHEABLE        NUMERIC(1,0) NOT NULL DEFAULT 0,
  CACHE_EXPIRY        INTEGER,
  CREATED             TIMESTAMP NOT NULL,
  CREATED_BY          VARCHAR(100) NOT NULL,
  UPDATED             TIMESTAMP,
  UPDATED_BY          VARCHAR(100),
  
  PRIMARY KEY (ID)
);
  
COMMENT ON COLUMN CODE_CATEGORIES.ID
  IS 'The Universally Unique Identifier (UUID) used to uniquely identify the code category';

COMMENT ON COLUMN CODE_CATEGORIES.ORGANISATION
  IS 'The organisation code identifying the organisation the code category is associated with';

COMMENT ON COLUMN CODE_CATEGORIES.CATEGORY_TYPE
  IS 'The type of code category e.g. Local, RemoteHTTPService, RemoteWebService, etc';

COMMENT ON COLUMN CODE_CATEGORIES.NAME
  IS 'The name of the code category';

COMMENT ON COLUMN CODE_CATEGORIES.DESCRIPTION
  IS 'The description for the code category';

COMMENT ON COLUMN CODE_CATEGORIES.CODE_DATA
  IS 'The custom code data for the code category';
  
COMMENT ON COLUMN CODE_CATEGORIES.ENDPOINT
  IS 'The endpoint if this is a remote code category';

COMMENT ON COLUMN CODE_CATEGORIES.IS_ENDPOINT_SECURE
  IS 'Is the endpoint for the remote code category secure';
  
COMMENT ON COLUMN CODE_CATEGORIES.IS_CACHEABLE
  IS 'Is the code data retrieved for the remote code category cacheable';

COMMENT ON COLUMN CODE_CATEGORIES.CACHE_EXPIRY
  IS 'The time in seconds after which the cached code data for the remote code category will expire';
  
COMMENT ON COLUMN CODE_CATEGORIES.CREATED
  IS 'The date and time the code category was created';

COMMENT ON COLUMN CODE_CATEGORIES.CREATED_BY
  IS 'The username identifying the user that created the code category';

COMMENT ON COLUMN CODE_CATEGORIES.UPDATED
  IS 'The date and time the code category was updated';

COMMENT ON COLUMN CODE_CATEGORIES.UPDATED_BY
  IS 'The username identifying the user that updated the code category';



CREATE TABLE CODES (
  ID           VARCHAR(80) NOT NULL,
  CATEGORY_ID  VARCHAR(40) NOT NULL,
  NAME         VARCHAR(256) NOT NULL,
  DESCRIPTION  VARCHAR(512),
  VALUE        VARCHAR(512) NOT NULL,
  
  PRIMARY KEY (CATEGORY_ID, ID)
);
  
COMMENT ON COLUMN CODES.ID
  IS 'The ID used to uniquely identify the code';

COMMENT ON COLUMN CODES.CATEGORY_ID
  IS 'The Universally Unique Identifier (UUID) used to uniquely identify the category the code is associated with';

COMMENT ON COLUMN CODES.NAME
  IS 'The name of the code';
  
COMMENT ON COLUMN CODES.DESCRIPTION
  IS 'The description for the code';

COMMENT ON COLUMN CODES.VALUE
  IS 'The value for the code';    

ALTER TABLE CODES ADD CONSTRAINT FK_CODES_CODE_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CODE_CATEGORIES(ID) ON DELETE CASCADE;
  
  
  
CREATE TABLE CACHED_CODE_CATEGORIES (
  ID            VARCHAR(40) NOT NULL,
  CODE_DATA     BLOB(4096k),
  LAST_UPDATED  TIMESTAMP NOT NULL,
  CACHED        TIMESTAMP NOT NULL,
  
  PRIMARY KEY (ID)
);
  
COMMENT ON COLUMN CACHED_CODE_CATEGORIES.ID
  IS 'The Universally Unique Identifier (UUID) used to uniquely identify the cached code category';

COMMENT ON COLUMN CACHED_CODE_CATEGORIES.CODE_DATA
  IS 'The custom code data for the cached code category';

COMMENT ON COLUMN CACHED_CODE_CATEGORIES.LAST_UPDATED
  IS 'The date and time the cached code category was last updated';

COMMENT ON COLUMN CACHED_CODE_CATEGORIES.CACHED
  IS 'The date and time the code category was cached';

ALTER TABLE CACHED_CODE_CATEGORIES ADD CONSTRAINT FK_CACHED_CODE_CATEGORIES_CODE_CATEGORY FOREIGN KEY (ID) REFERENCES CODE_CATEGORIES(ID) ON DELETE CASCADE;



CREATE TABLE CACHED_CODES (
  ID           VARCHAR(80) NOT NULL,
  CATEGORY_ID  VARCHAR(40) NOT NULL,
  NAME         VARCHAR(256) NOT NULL,
  DESCRIPTION  VARCHAR(512),
  VALUE        VARCHAR(512) NOT NULL,
  
  PRIMARY KEY (CATEGORY_ID, ID)
);
  
COMMENT ON COLUMN CACHED_CODES.ID
  IS 'The ID used to uniquely identify the code';

COMMENT ON COLUMN CACHED_CODES.CATEGORY_ID
  IS 'The Universally Unique Identifier (UUID) used to uniquely identify the category the code is associated with';

COMMENT ON COLUMN CACHED_CODES.NAME
  IS 'The name of the code';
  
COMMENT ON COLUMN CACHED_CODES.DESCRIPTION
  IS 'The description for the code';

COMMENT ON COLUMN CACHED_CODES.VALUE
  IS 'The value for the code';  
  
ALTER TABLE CACHED_CODES ADD CONSTRAINT FK_CACHED_CODES_CACHED_CODE_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CACHED_CODE_CATEGORIES(ID) ON DELETE CASCADE;  

  

-- -------------------------------------------------------------------------------------------------
-- POPULATE TABLES
-- -------------------------------------------------------------------------------------------------
INSERT INTO IDGENERATOR (NAME, CURRENT) VALUES
  ('Application.OrganisationId', 100000);
INSERT INTO IDGENERATOR (NAME, CURRENT) VALUES
  ('Application.UserId', 100000);
INSERT INTO IDGENERATOR (NAME, CURRENT) VALUES
  ('Application.UserPasswordHistoryId', 100000);
INSERT INTO IDGENERATOR (NAME, CURRENT) VALUES
  ('Application.GroupId', 100000);
INSERT INTO IDGENERATOR (NAME, CURRENT) VALUES
  ('Application.FunctionId', 100000);
INSERT INTO IDGENERATOR (NAME, CURRENT) VALUES
  ('Application.FunctionTemplateId', 100000);
INSERT INTO IDGENERATOR (NAME, CURRENT) VALUES
  ('Application.ScheduledTaskParameterId', 100000);
INSERT INTO IDGENERATOR (NAME, CURRENT) VALUES
  ('Application.CodeId', 10000000);  
  
INSERT INTO ORGANISATIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (1, 'MMP', 'MMP', 'MMP');
  
INSERT INTO USERS (ID, USERNAME, PASSWORD, TITLE, FIRST_NAMES, LAST_NAME, PHONE, FAX, 
  MOBILE, EMAIL, PASSWORD_ATTEMPTS, PASSWORD_EXPIRY, DESCRIPTION) VALUES 
  (1, 'Administrator', 'cMzZAHM41tgd07YnFiG5z5qX6gA=', '', '', '', '', '', '', '', null, null, 
  'Administrator');
INSERT INTO USERS (ID, USERNAME, PASSWORD, TITLE, FIRST_NAMES, LAST_NAME, PHONE, FAX, 
  MOBILE, EMAIL, PASSWORD_ATTEMPTS, PASSWORD_EXPIRY, DESCRIPTION) VALUES 
  (2, 'test1', 'cMzZAHM41tgd07YnFiG5z5qX6gA=', '', '', '', '', '', '', '', null, null, 
  'Test');

INSERT INTO GROUPS (ID, GROUPNAME, DESCRIPTION) VALUES
  (1, 'Administrators', 'Administrators');
INSERT INTO GROUPS (ID, GROUPNAME, DESCRIPTION) VALUES
  (2, 'Organisation Administrators', 'Organisation Administrators');
  
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (0, 'Application.SecureHome', 'Secure Home', 'Secure Home');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (1, 'Application.Dashboard', 'Dashboard', 'Dashboard');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (2, 'Application.OrganisationAdministration', 'Organisation Administration', 'Organisation Administration');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (3, 'Application.AddOrganisation', 'Add Organisation', 'Add Organisation');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (4, 'Application.UpdateOrganisation', 'Update Organisation', 'Update Organisation');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (5, 'Application.RemoveOrganisation', 'Remove Organisation', 'Remove Organisation');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (6, 'Application.UserAdministration', 'User Administration', 'User Administration');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (7, 'Application.AddUser', 'Add User', 'Add User');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (8, 'Application.UpdateUser', 'Update User', 'Update User');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (9, 'Application.RemoveUser', 'Remove User', 'Remove User');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (10, 'Application.GroupAdministration', 'Group Administration', 'Group Administration');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (11, 'Application.AddGroup', 'Add Group', 'Add Group');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (12, 'Application.UpdateGroup', 'Update Group', 'Update Group');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (13, 'Application.RemoveGroup', 'Remove Group', 'Remove Group');  
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (14, 'Application.UserGroups', 'User Groups', 'User Groups');  
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (15, 'Application.CodeCategoryAdministration', 'Code Category Administration', 'Code Category Administration');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (16, 'Application.AddCodeCategory', 'Add Code Category', 'Add Code Category');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (17, 'Application.RemoveCodeCategory', 'Remove Code Category', 'Remove Code Category');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (18, 'Application.UpdateCodeCategory', 'Update Code Category', 'Update Code Category');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (19, 'Application.CodeAdministration', 'Code Administration', 'Code Administration');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (20, 'Application.AddCode', 'Add Code', 'Add Code');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (21, 'Application.RemoveCode', 'Remove Code', 'Remove Code');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (22, 'Application.UpdateCode', 'Update Code', 'Update Code');
INSERT INTO FUNCTIONS (ID, CODE, NAME, DESCRIPTION) VALUES
  (23, 'Application.ResetUserPassword', 'Reset User Password', 'Reset User Password');

  
-- INSERT INTO FUNCTION_TEMPLATES (ID, CODE, NAME, DESCRIPTION) VALUES 
--   (1, 'Application.Administration', 'Administration', 'Administration');

-- INSERT INTO FUNCTION_TEMPLATE_MAP (FUNCTION_ID, TEMPLATE_ID) VALUES (1, 1);
-- INSERT INTO FUNCTION_TEMPLATE_MAP (FUNCTION_ID, TEMPLATE_ID) VALUES (2, 1);

INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 0);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 1);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 2);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 3);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 4);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 5);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 6);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 7);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 8);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 9);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 10);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 11);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 12);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 13);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 14);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 15);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 16);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 17);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 18);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 19);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 20);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 21);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 22);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 23);

INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 0);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 6);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 7);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 8);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 9);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 14);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 22);
INSERT INTO FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 23);

INSERT INTO USER_ORGANISATION_MAP (USER_ID, ORGANISATION_ID) VALUES (1, 1);

INSERT INTO USER_GROUP_MAP (GROUP_ID, USER_ID, ORGANISATION_ID) VALUES (1, 1, 1);

INSERT INTO EXTERNAL_GROUPS (ID, GROUPNAME) VALUES (1, 'Administrators');
INSERT INTO EXTERNAL_GROUPS (ID, GROUPNAME) VALUES (2, 'Organisation Administrators');

INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 0);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 1);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 2);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 3);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 4);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 5);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 6);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 7);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 8);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 9);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 10);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 11);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 12);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 13);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 14);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 15);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 16);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 17);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 18);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 19);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 20);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 21);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 22);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (1, 23);

INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 0);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 6);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 7);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 8);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 9);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 14);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 22);
INSERT INTO EXTERNAL_FUNCTION_GROUP_MAP (GROUP_ID, FUNCTION_ID) VALUES (2, 23);



-- -------------------------------------------------------------------------------------------------
-- SET PERMISSIONS
-- -------------------------------------------------------------------------------------------------


























































