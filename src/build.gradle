// ---------------------------------------------------------------------------------------
// Apply configuration common to all the Java projects
// ---------------------------------------------------------------------------------------
subprojects.findAll { 
	it.name in [
		'mmp-application',
		'mmp-application-customer',
		'mmp-application-customer-wicket',
		'mmp-application-messaging',
		'mmp-application-messaging-wicket',
		'mmp-application-process',
		'mmp-application-process-wicket',
		'mmp-application-reporting',
		'mmp-application-reporting-wicket',
		'mmp-application-scheduler',
		'mmp-application-scheduler-wicket',
		'mmp-application-sms',
		'mmp-application-test',
		'mmp-application-wicket',
		'mmp-common',
		'mmp-corba',
		'mmp-sample-wicket-client',
		'mmp-sharepoint',
		'mmp-tomcat'
	] 
}.each { 
	p -> configure(p) {
		apply plugin: 'java'

		/*
		 * NOTE: We need to copy the META-INF/beans.xml from the "main" resources to the 
		 *       classes output folder for Weld to successfully resolve the classes. This
		 *       is because Weld only resolves classes in the same classpath location as
		 *       the beans.xml file.
		 */
		sourceSets.main.resources {
			exclude 'META-INF/beans.xml'
			classes {
				inputs.dir 'src/main/resources/META-INF/beans.xml'
				outputs.dir "$buildDir/classes/main/META-INF/beans.xml"
			} << {
				copy {
					from('src/main/resources') { include 'META-INF/beans.xml' }
					into "$buildDir/classes/main/"
				}
			}
		}

		/*
		 * NOTE: We need to copy the META-INF/beans.xml from the "test" resources to the 
		 *       classes output folder for Weld to successfully resolve the classes. This 
		 *       is because Weld only resolves classes in the same classpath location as 
		 *       the beans.xml file.
		 */
		sourceSets.test.resources {
			exclude 'META-INF/beans.xml'
			classes {
				inputs.dir 'src/test/resources/META-INF/beans.xml'
				outputs.dir "$buildDir/classes/test/META-INF/beans.xml"
			} << {
				copy {
					from('src/test/resources') { include 'META-INF/beans.xml' }
					into "$buildDir/classes/test/"
				}
			}  
		}  

		task copyToDist (type: Copy, dependsOn: build) {
			from './build/libs'
			into '../../dist'
			include "${project.name}-${version}.jar"
		}   

		build.finalizedBy(copyToDist)

		task cleanDist (type: Delete, dependsOn: clean) {
			delete "../../dist/${project.name}-${version}.jar"
		}   

		clean.finalizedBy(cleanDist)
	}
}

// ---------------------------------------------------------------------------------------
// Apply the wsdl2java task to the appropriate Java projects 
// ---------------------------------------------------------------------------------------
subprojects.findAll { 
	it.name in [
  	'mmp-application',
  	'mmp-sample-wicket-client',
  	'mmp-sample-wicket-war',
  	'mmp-sharepoint'
	] 
}. each { 
	p -> configure(p) {    
		task wsdl2java(type: WSDL2JavaTask) {
		}
	}
}

// ---------------------------------------------------------------------------------------
// The WSDL2JavaTask generates the JAX-WS portable artifacts from WSDL files.
// ---------------------------------------------------------------------------------------
class WSDL2JavaTask extends DefaultTask {

  List<String> bindingFiles = new ArrayList<String>()
  
  boolean keepGeneratedFiles = true

  String sourceDir
  
  String targetVersion  = "2.2"

  List<String> wsdlFiles = new ArrayList<String>()

  @TaskAction
  def wsdl2java() {
    println "- Generating the JAX-WS portable artifacts for the project \"${project.name}\" using ${wsdlFiles.size} WSDL file(s)..."

    if ((sourceDir == null) || (sourceDir.length() == 0)) {
      throw new GradleException('No source directory specified for the WSDL2JavaTask task')
    }

    List<String> parameters = new ArrayList<String>()
    
    parameters.add('wsimport')

    for (String bindingFile : bindingFiles) {
      parameters.add('-b')
      parameters.add("${bindingFile}")
    }
    
    parameters.add('-cp')
    parameters.add('../mmp-common/build/classes/main/')
    
    if (keepGeneratedFiles) {
      parameters.add('-keep')
    }

    parameters.add('-s')
    parameters.add("${sourceDir}")
    
    parameters.add('-target')
    parameters.add("${targetVersion}")
    
    parameters.add('-Xnocompile')
    
    for (String wsdlFile : wsdlFiles) {

      println "  - Processing the WSDL file \"${wsdlFile}\""
  
      List<String> wsdlParameters = new ArrayList<String>(parameters)
      
      wsdlParameters.add(wsdlFile)
      
      String[] execParameters = wsdlParameters.toArray()
      
      execParameters[execParameters.length - 1] = wsdlFile
      
      Process process = Runtime.getRuntime().exec(execParameters)    

      java.io.BufferedReader input = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream()))
    
      String line
    
      while ((line = input.readLine()) != null) {
        println line
      }
      
      input.close();    
    }    
  }
}  


